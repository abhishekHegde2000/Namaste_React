npm - Node Package Manager

package.json is a configuration file for npm.
You can create it using npm init and providing details in the terminal.
npm manages packages, often referred to as dependencies.
It takes care of package versions, which are recorded in package.json.
Dependencies and Bundling

Bundling is the process of preparing code for production shipment.
Common bundlers include Webpack, Parcel, and Vite.
Create React App uses Webpack behind the scenes.
Using Parcel for Bundling

- We will use Parcel as our bundler.
- To install Parcel, use the command: `npm install -D parcel`.
- The `-D` flag signifies that we are installing Parcel as a development dependency.
- There are two types of dependencies:
  - **Dev Dependencies**: These are required for development purposes and are not needed in production.
  - **Normal Dependencies**: These are used in both development and production environments.

- After installation you should see a new folder called node_modules inside your project directory with all the installed modules listed therein.


- We install Parcel as a dev dependency because it's used during the development phase and not required for production.

- After installing Parcel, you can check the `package.json` file, and Parcel's entry will be visible in it.

- The caret symbol (^) is used when specifying a package version. For example, if you specify "^2.8.3," it means you have version 2.8.3 installed today. If a new update becomes available tomorrow, Parcel will automatically update to a compatible version, but it will not upgrade to a new major version. The caret symbol ensures compatibility within the same major version.

------------------------------------------------------------------------------

- **package-lock.json**: This file keeps track of the exact versions of dependencies being installed. It locks the versions to ensure consistency across environments.

- **node_modules**: The `node_modules` folder contains all the project dependencies (libraries) required for your project. When you run `npm install`, it downloads and stores the actual data needed for these dependencies.

- **Transitive Dependencies**: When you install a package like Parcel, it may have its own dependencies, and those dependencies can have their dependencies as well. This chain of dependencies is known as "transitive dependencies." They are automatically installed to ensure the package you're using functions correctly.

------------------------------------

You've raised some important considerations regarding what to include in version control and what to ignore. Here's a summary for your notes:

- **node_modules Size**: The `node_modules` folder can be quite large due to all the project dependencies. It's not recommended to include this in your version control system.

- **.gitignore**: To exclude certain files or directories (like `node_modules`) from being pushed to Git, you should use a `.gitignore` file. This file lists what should be ignored by Git.

- **What to Include in Git**: You should include `package.json` and `package-lock.json` in your Git repository. These files maintain integrity and allow you to recreate the exact dependency versions used in your project. Others can use these files to set up the same development environment by running `npm install`. it will automaticcally install node_modules

This approach keeps your repository cleaner and ensures that production only includes the necessary code while still maintaining the ability to reproduce the development environment accurately.

